Welcome back. In the last session, we have briefly discussed the most important Torch libraries. Today, we're going to have a closer look at the Torch library which is the PyTorch tensor library. So, how to create a tensor? It's very simple with PyTorch. So first of all, you create an object which is a vector or a matrix, and then you pass this object to tensor class as an argument. So you see here, we have created one vector, one, two and three. And then, we are passing this vector as argument here for the torch class. The same thing with the two or three matrix and higher dimensional object like tensor of a three-by-three-by three. This is the same. In here, we are creating bigger tensor which is dimension of four-by-three-by-three-by-three. So, let us execute this cell. And here, we see, it has indeed created a tensor of size three which is a float tensor. You can see here, torch.FloatTensor, and the second variation has created tensor of dimension of size two-by-three. And here, we have created a tensor of size three-by-three-by-three. And last one, of course, it has dimension four-by-three-by-three matrix. It's simple and straightforward. Now, we're going to discuss the question of multidimensional tensors. It's actually important because we are dealing a lot in PyTorch and not only with PyTorch but also with another frameworks like Keras, we are dealing with highly dimensional tensors. So, how can we understand it? For a lower dimensional objects, it's pretty straightforward. Here, we're indexing into a vector which was actually tensor of size three. So now, if we're indexing into this vector, into the stands of size three, and getting the first element with the index zero, we're getting just a scalar. Here, we're indexing into actually matrix but it's not the matrix, it's now a tensor with dimension two-by-three. So, we are getting here first element with index zero, and this first element is, by itself, a tensor which has size three. It's actually a column vector, you can see that column vector. Here, we're indexing into a tensor of dimension three-by-three-by-three or size three-by-three-by-three. And here, we're getting a matrix out of it. It's not a matrix, it's a tensor of size three-by-three. And last one, we are getting an object, a float tensor of size three-by-three-by-three. Geometrically speaking, it's a cube actually. So, let us see on this picture what it does. I have tried to represent a 4D tensor. If we have sliced into the dimension, into this 4D tensor, we've got out of it a cube actually. It's a tensor of size three-by-three-by-three. So, you see here three colors, it's just for fun, and you can see here, three cubes, and this whole image is actually a representation of 4D tensor. So the fourth dimension, you can see as a container for the tensors of dimension minus one of lower dimension, like if you have a tensor which has a size of four-by-three-by-three-by-three, so you have the highest dimension is four. So, this fourth dimension is actually, you can see it as a container for the tensors of lower dimension. Like in our case, we have here cubes like three cubes and we can slice into this tensor, and we're getting out an object, a tensor of dimension three-by-three-by-three. I think it's pretty important to be able to visualize at the beginning some basic structures and we deal with high dimensional objects. So later on, we will deal with this stuff, with high dimensional objects, and you will don't need to visualize it continuously, but it's important to have this understanding and I hope I could bring it a little bit closer to you. So, enjoy our sessions. See you then. Bye-bye.