In the last part of our little introduction to Keras, we're going to talk about Serializing and Deserializing Keras Models. Each Keras model, whether it's a sequential model or a more general on non sequential model, can be saved and loaded back again into memory. There's a few ways to do that. And the first option is to serialize the full model as HDF5. But for model, we mean the architecture, meaning its configuration. All the weights as well as the training configuration and the state of the training configuration, which would allow you to, if you pick up the model again, continue training from where you left it of. You can also just persist the architecture as JSON or YAML, or you can just persist the weights as a HDF5. Okay, let's have look at the architecture or the weights separately. To save the adjacent configuration of a model is simply called model.to_json to arrive at the JSON string. If you want to rather have it serialized as a YAML format, you call model.to_yaml. If you want to save the weights, you simply code model.save_weights on the model with a specified path to your file. If you want to load back your JSON configuration into a model architecture, you first import model from JSON from Keras model's sub module, and call model_from_json on your previously defined JSON string. If you want to load back the weights again, you do that by calling model.load_weights on the previously defined file path. All right, if you want to persist the full model, that's actually a little easier, you simply call model.save on a path to an HDF5 file that you can choose on your own. And if you want to load it back again, you first import load_model, and then load the model with the specified file. That's pretty much it. This can be quite useful and we will see in the later lecture how to import serialized Keras models into.