So now, let's actually scale and deploy a TensorFlow model with IBM Watson Machine Learning. Watson Machine Learning, it's a service in the cloud where you can deploy your model and Watson Machine Learning takes care about scaling and for tolerance. So, scaling happens on a GPU cluster. And if you don't use the model, there is no load on the cluster. Therefore, there's no charge. And if there is a heavy load on the model, then, of course, you are charged for the CPU and GPU cycles you are using. Luckily, there is also free tier. S, no need to worry, you can use it for free for a limited amount of IPI calls, and that's actually what's happening. So you deploy the model to the IBM Watson Machine Learning service, which actually at the moment can run Scikit-learn and Spark ML models from the Machine Learning perspective and TensorFlow models from a deep learning perspective. So the next one which will be released is the support for Cargospot as well. The overall recharge of such a deployment is just arrest and point for scoring, you can do training on the service but in this course we will only cover scoring. So that means you deploy your already trained model to the service and then you get a score endpoint, which you then can provide to others and they can use your endpoint with only a little skills about the over all staff. It's just the rest endpoint so everybody can actually call a rest endpoint. So let's get started. We start with an import of Tensorflow and then we import the MNIST dataset. So this is again an MNIST example, it's an MNIST classification example. So we have the number of inputs. That's again, 784 dimensions. One picks list one dimension and we have an output of 10 dimensions because we 10 classes, that digits from zero to nine. And again, we create the placeholders for those two and then we initialize some weights. So this is a convolutional neural network. We have covered convolutional neural networks in the first week and also in the third week using Caris, but here we are using Tensorflow. But don't worry if you don't understand it because Tensorflow is a very, very low level framework with a lot of linear algebra operations going on. So it's just sufficient if you get some idea of what's going on. So once you've defined the rates, you will actually also create the layers. This is far more complicated than in Caris, believe me. And then, we set some training parameters like number of iterations which is 60,000, bit size of 128, sometimes I'm using 64 or 32, that depends on your data and it's also hyperparameter which we have to tune. And every 10 steps we display some intermediate results. We initialize all of the variables and we start the session, and then we directly enter into the creative descent loop and immediately start training. This takes some time. It takes more time than in the example of the first week because in the first week we've used Softmax regression and here we are using convolutional layers. So that's computationally more expensive, therefore it takes more time. So this seems to be done, model training has finished. So now, it's time to create some signatures for the tensors which we are using for scoring. Don't worry too much about this detail but it's basically somehow extracting the scheme off to input that the Watson Machine Learning Service knows how to define the rest endpoint. Now, we're saving the model to the file system, again in Tensorflow this is a bit more complicated, in Caris it's just one line of code, recited as a compressed archive and we have to extract the contents of the archive in order to make it available for the Watson Machine Learning Service. So the Watson Machine Learning Service is only a set of rest APIs, but luckily there exists Python client, so we don't have to mess up with ugly rest calls and just can use this skeleton here. So you have to provide the credentials of the Watson Machine Learning Service. In order to obtain those, just go to the application where your service is bound to, click on the connections tab, and then click on the new credentials. And that basically returns you the credentials you need to access the service. So this is a chase with a lot of information, but we just need a credential section here. Now it's time to build a client, and we can add some metadata. So this is metadata from my friend Krishna in the IBM Watson Lab in Bangalore. And now we can store the model into the service. So after we have started the service, in the UI of the Watson Machine Learning it looks like this, but it's not deployed so far, so we have to deploy it first. So now let's deploy it using the client API, and once this is done, we can have a look at the UI of the Watson Machine Learning service, and we will see that the deployment actually was successfully. Once the model is deployed, it returns a scoring endpoint and using the scoring endpoint we can actually provide the service to others. So now let's test the service, we are taking two images from the MNST dataset. Let's have a look how they look like. I know that it's a five and a four already but know you are also convinced. And now we create a JSON object containing those two images. So remember, each image is a vector of size 784. So we just pass those two vectors in the JSON array, and this JSON array is a property of a JSON object, which has input it's name. And that's basically all, you can just use the scoring URL and our scoring data and let's see what happens. Awesome. It works. So the return classes are five and four and you can see that's obviously correct. And the cool thing is now you don't have to care about operations and for tolerance and scaling, if you need more performance, the service automatically will assign more GPUs to the task and the response time will be kept stable. So in order to create a Watson Machine Learning service, you just need to access the IBM cloud dashboard, you click on resource, then you filter for Watson and then you receive Watson Machine Learning, you click on that one and you finally click on Create and that's all. Once the service is deployed, you can click on launch dashboard, and you will enter the UI of the Watson Machine Learning service.