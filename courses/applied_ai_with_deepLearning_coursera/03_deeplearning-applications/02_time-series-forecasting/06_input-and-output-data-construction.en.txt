Welcome back. In the last session, we have discussed how to compute the training set size based on the batch-size. Now, we're going to construct our input and output data for the LSTM. But first, we're going to do some pre-processing. First of all, we are increasing the upper boundary of our training set size. We are adding here timesteps multiplied by two. Why it's required, we're going to see in the next steps. So, now we just execute the cell. And we see our training set data goes up to 6,996, so we have increased by 20. The next step is very important for every neural network. We do feature scaling. So, meaning we scale down every value which should be in the range between zero and one. To do this, we import a MinMaxScaler from sklearn prepocessing package. We initialize this class MinMaxScaler and giving the range from zero to one. And then we call fit transform method from sklearn. This method takes our training set. And here we do also casting to float 64 because otherwise it will show warnings. So we do this. And now our data is scaled. So, now this point is very important here. Actually what is happening here is, we're constructing the input data, which is x_train and output data which is y_train. So, first of, we're initializing them as arrays. And the second step, we are going to append data. So, we are iterating in the range from 10, so we have 10 timesteps from 10, to the maximum value is length plus number of timesteps. So, the length we have already defined here, this is 6,976 plus number of timesteps y. This is why we are constructing input data as a data which is lying 10 timesteps in the past. So, we're actually subtracting, if we say that the point i, we're iterating here over i. The i is null, this is the time point of null. So, now we are going 10 timesteps back. So, you see here i minus timesteps, timesteps is 10 and adding these values, appending these values to extreme array. So, we are constructing input values by subtracting timesteps. And here, we are constructing y_train which is the target value, which we're going to predict. And these values are the values which are lying in the future. And we are constructing this by adding timesteps to it. So, here we are subtracting, and here in this point, we are adding timesteps. If we execute this cell, we're getting here, I'm printing some values for convenience. So, we see that the lengths plus timesteps is here 6,986, so we have added 10. And here if we are constructing the inputs and outputs values in such a way, we are getting exact the same length as we have defined here, 6,976. So, we have here 6,976. So, we have constructed in such a way x_train and y_train. In our programming assignment, you will be able to reproduce this, so don't worry, you're going to to learn how to construct the input and output data. So what we do here, is simply reshaping, because the Keras requirement for the input and output data is that it has to be three dimensional array. The first dimension is the length dimension which we have already computed. The second one is number of timesteps which are 10. And the last one is number of parameter which we're going to predict. Now, we are just predicting one parameter which is the crude oil price, so this value is one. Let us execute this. And we have constructed arrays, the input array, extreme output array, y_train and we have reshaped it to the three dimensional arrays. So, stay tuned. Until the next time, enjoy our sessions. Bye bye.